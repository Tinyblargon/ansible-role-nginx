---
- name: Ensure nginx and snakeoil cert is installed
  ansible.builtin.apt:
    name:
      - nginx
      - ssl-cert
    state: present
    cache_valid_time: 3600
  become: true

- name: Check if backup exists
  ansible.builtin.stat:
    path: "{{ nginx_backup_file }}"
  register: nginx_backup_exists
  when: nginx_backup
  become: true

# Restore in case the connection was lost mid configuration
- name: Restore nginx from previous run
  ansible.builtin.include_tasks:
    file: restore.ansible.yml
  when: nginx_previous_restore_condition

- name: Ensure nginx is running and enabled
  ansible.builtin.systemd:
    name: nginx
    state: started
    enabled: true
  become: true

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Backup nginx
  ansible.builtin.include_tasks:
    file: backup.ansible.yml
  when: nginx_backup_condition

- name: Configure vhosts
  ansible.builtin.include_tasks:
    file: vhosts.ansible.yml
  when: nginx_vhosts | length > 0

- name: Remove unspecified vhosts
  ansible.builtin.include_tasks:
    file: vhosts_remove.ansible.yml
  when: nginx_vhosts_remove

- name: Validate nginx config
  block:
    - name: Test nginx config
      ansible.builtin.command:
        cmd: nginx -t
      changed_when: false
      no_log: true
      become: true
      when: nginx_backup_condition
  rescue:
    - name: Restore nginx backup
      ansible.builtin.include_tasks:
        file: restore.ansible.yml
      when: nginx_backup_condition
    - name: Flush handlers
      ansible.builtin.meta: flush_handlers
    - name: Invalid nginx config
      ansible.builtin.fail:
        msg: "{{ ansible_failed_result.stderr_lines }}"

- name: Delete backup
  ansible.builtin.file:
    path: "{{ nginx_backup_file }}"
    state: absent
  changed_when: false
  become: true
  when: nginx_backup_condition

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
